openapi: 3.0.0
servers:
  - url: 'https://client.base.uri/root'
info:
  version: '3.8.0'
  title: Groupe PSA Connected Car B2B API
  description: | 

                # Introduction
  
                This is the description of the *Groupe PSA Connected Car V2 B2B API* Webhooks template.This specification is written in **OpenAPI Specification version 3** and can
                be displayed using [ReDoc](https://github.com/Rebilly/ReDoc) or
                [Swagger](http://swagger.io).
                
                This webhook template specifies the HTTP POST requests related to the **remote action** & **monitor** events of *Groupe PSA Connected Car V2 B2B API*.
                
                # Security
                  * The authentication is already set when registering the callback using the attributes field to set HTTP header entries for the authentication (usually a _basic authentication_).
                  * HTTPS scheme should be supported with the webhook server with a certificate issued by a trusted public and known CA. 

    
  license:
    name: Groupe PSA Licence
    url: 'https://www.psa-peugeot-citroen.com/'
tags:
  - name: Remote-Webhook
    description: Remote webhook model.
  
  - name: Monitor-Webhook
    description: Monitor webhook model.
 
paths:
  '/remote/webhook':
    post:
      tags:
        - Remote-Webhook
      summary: Post a list of remote events.
      description: |
                    Post a list of remote events.
      operationId: postRemoteEvents
      parameters:
        - $ref: '#/components/parameters/headerAttribute'
        - $ref: '#/components/parameters/queryAttribute'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/RemoteEvents'
      responses:
        202:
         description: Post Ok(accepted).
        default:
          $ref: '#/components/responses/PostErrorResponse'
  
  '/monitors/webhook':
    post:
      tags:
        - Monitor-Webhook
      summary: Post a list of monitor events.
      description: |
                    Post a list of avent raised by a registered monitor.
      operationId: postMonitorEvents
      parameters:
        - $ref: '#/components/parameters/headerAttribute'
        - $ref: '#/components/parameters/queryAttribute'
      requestBody:
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/MonitorEvents'
      responses:
        201:
         description: Post Ok.
        default:
          $ref: '#/components/responses/PostErrorResponse'

 
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    Attributes:
          type: array
          description: >-
            Additional attribute set that was defined as 'body' attribute type when registering the monitor (a set of key / values)
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
            required:
              - key
              - value  
   
  
  
    MonitorEvents:
      title: MonitorEvents
      description: Monitor event list. This list will contain only one item when the batch-notify (see Monitor API) is not set.
      type: object
      properties:
        monitorId:
           $ref: '#/components/schemas/MonitorId'
        attributes:   
            $ref: '#/components/schemas/Attributes'
       
        events:
              type: array
              items:
                $ref: '#/components/schemas/MonitorEvent'
    
    MonitorEvent:
      title: MonitorEvent
      type: object
      properties:
        fleetId : 
          description : Identifier of the fleet that raises the event. 
          type : string
        vin:
          description: Identifier of the vehicle that raises the event.
          type: string  
        eventDate:
          description: The date on which the event was raised.
          type: string
          format: dateTime
       # position:
        #  $ref: '#/components/schemas/Position'
       
        values:
          type: array
          description: Values that caused the trigger. If subscribed monitor trigger is not a compound one then the array will contain only one item.
          items:
            type: object
            description: Values pairs that caused the event.
            properties:
              data:
                  type: string
                  enum:
                  - vehicle.alert
                  - vehicle.odometer
                  - vehicle.engines.running
                  - vehicle.engines.thermic.oil.temp
                  - vehicle.energy.electric.level
                  - vehicle.energy.electric.autonomy
                  - vehicle.energy.fuel.level
                  - vehicle.energy.fuel.autonomy
                  - vehicle.autonomy
                  - vehicle.energy.charging.status
                  - vehicle.energy.charging.plugged
                  - vehicle.doorsState.lockedState
                  - vehicle.doorsState.opening
                  - vehicle.kinetic.moving
                  - vehicle.kinetic.speed
                  - vehicle.trip
                  - vehicle.trip.start
                  - vehicle.trip.stop
                  - vehicle.maintenance.daysBeforeMaintenance
                  - vehicle.maintenance.mileageBeforeMaintenance
                  - vehicle.safety.beltWarning
                  - environment.air.temp
                  - privacy.state
                  - vehicle.collision.side
                  - vehicle.collision.severity
                  - vehicle.safety.autoECallTriggering
                  - vehicle.preconditioning.airConditioning
                
                  description: The monitored data (operand of a trigger).
              value: 
                description: Values that caused the trigger. Could be a list of data values in case of 'includedIn' operation is used
                type: object
                properties:
                      type:
                        type: string
                        enum: [string, obj.alert, obj.collision]
                      body:
                        type: object
                        properties:
                        
                          literalValue:
                            type: string
                            description: A literal representation of the primitive data value. The client application should be aware of that and should convert it regarding the trigger data type.  
                          objectValues:
                            type: array 
                            items:
                              type: object
                              description: For this object schema definition (based on the type of field), refere to the API Spec definition.
                    
        extensions:
          description: Defines the extra vehicle data as specified in the monitor extended eventparam file (see Monitor parameter object definition in the API Spec)
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                description: Speficies the data type of body items. 
                enum: [vehicle.doorsState, vehicle.status, vehicle.maintenance,vehicle.position, vehicle.telemetry, vehicle.alerts, vehicle.collisions, vehicle.trip]
              body:
               
                  description: |
                    The body of the extension is made up of one of the fields below. Each one is expressed as a generic object and the type is the same as the related one in [MPH API SPEC](https://developer.groupe-psa.io/assets/openapi/api-b2b-v3.yaml)  (without ```HAL links``` fields).      
                    
                      |**Value**|**Description**|**Related Model**|
                      |---|---| ---:|
                      | vehicle.doorsState | Latest know door state (timestamped) before the eventDate | DoorState |
                      | vehicle.status | Latest know vehicle status (timestamped) before the eventDate | Status |
                      | vehicle.maintenance | Latest know maintenance(timestamped) before the eventDate | Maintenance |
                      | vehicle.position | Last vehicle position (timestamped) before the eventDate | Position |
                      | vehicle.telemetry${.TelemetryEnum} | Latest known telemetry (timestamped) before the eventDate filtered with type | Telemetry
                      | vehicle.alerts | List of active alerts at the eventDate | Alert |
                      | vehicle.collisions | Latest collisions information before or at the eventDate | Collision |
                      | vehicle.trip |  Trip related to the event that triggers the notification | Trip |

                  type: object
                  properties:
                    doorState:
                      type: object
                      description: Return the latest known doors status before or at the eventDate
                    status:
                      type: object
                      description: Return the latest known status before or at the eventDate
                    maintenance:
                      type: object
                      description: Return the latest known maintenance information before or at the eventDate
                    position:
                      type: object  
                      description: Return the latest known position before or at the eventDate
                    telemetry:
                      type: object
                      description: Return the latest known telemtry before or at the eventDate
                    alerts:
                      type: array
                      description: Return all active alerts at the eventDate
                      items:
                        type: object
                    collisions:
                      type: object
                      description: Return the latest collisions (Front/lateral/Rear) status and severity before or at the eventDate
                    trip: 
                      type : object
                      description: Return the trip related to this event
                  
        
        refresh:
          description: |
              Indicates whether the event is a refresh (reminder) one or not.
              * ```false``` means entering the context of the trigger (1st time the trigger valued true). 
              * ```true``` means this is it a reminder event (already within trigger satisfied context).
          type: boolean

    
    MonitorId:
      type: string
      description: The identifier of monitor that raised the event.  
    RemoteActionId:
      type: string
      description: The unique remote action ID. This ID is returned when the remote action is posted and accepted.
      
    RemoteCallbackId:
      type: string
      description: Unique remote callback ID used to notify events. This Id refers to the remote callback created and selected to post this remote action in "Connected Car B2B API".
      
    RemoteEvents:
      title: RemoteEvents
      description: Remote event list. This list will contain only one item when the batch-notify (see Remote API) is not set.
      type: object
      properties:
        callbackId:
           $ref: '#/components/schemas/RemoteCallbackId'
        attributes:   
            $ref: '#/components/schemas/Attributes'
       
        events:
              type: array
              items:
                $ref: '#/components/schemas/RemoteEvent'
    RemoteType:
      type: string    
      enum: 
            - ThermalPreconditioning
            - ElectricBatteryChargingRequest
            - Horn
            - Doors
            - Lights
            - Immobilization
            - Stolen
            - VehicleState
            - ChargingState
            - WakeUp
            - Navigation
    RemoteEventType:
      description: | 
        The event type. See```status```for event sate.
        * Pending event is related to intermediate state of the action before it is handled by the vehicle.
        * Done event is related to a final state of the action when handled by the vehicle.
         
      type: string    
      enum: 
            - Pending
            - Done
            
    RemoteDoneEventStatus:
      description: | 
        The reponse event status. 
         
      type: string    
      enum: 
            - Success
            - AlreadyDone
            - Failed
            
    RemotePendingEventStatus:
      description: | 
        The processing event status. 
         
      type: string    
      enum: 
            - Accepted
            - WakingUpVehicle
            - CheckingVehicle
            - SentToVehicle
            - VehicleBatteryChargeTooLow
            - TooManyWakeUpsOverMonth
            
    RemoteFailedEventStatus:
      description: | 
        The failure cause for event with failed status. This field is filled only is failure state. 
         
      type: string    
      enum: 
            - GeneralError
            - VehicleError
            - WrongCommand
            - VehicleConnectionTimeout
            - MissingRights
            - NotPossibleDueToVehicleBatteryLevel
            - NotPossibleDueToVehiclePrivacyLevel
            - TooManyWakeUpsOverMonth
            - TooManyRequestInShortTime
            - SameActionInProgress
            - NotPossibleDueToVehicleStolenState
            - VehicleInUse
            - TooManyRequestSent 
            - DoorsOpen
            - VehicleErrorOrCidInside
            - CidInside
            - ExternalChargingSystemError
            - VehicleChargingSystemError
            - VehicleIsNotLocked
            - CanceledByDriver

    RemoteEventFeedbackDetail:
      description: | 
        Additionnal detail in case of success on some specific behavior :
        
        |Feature|Description|Behavior|
        |----------|:-------------|------:|
        |Lock Doors|Send a lock doors by force|NoCIDBlacklisted if lock is OK but IML not blacklisted, CIDBlacklisted is when the doors are locked and the IML is well blacklisted|

        
      type: string
      enum:
            - NoCIDBlacklisted
            - CIDBlacklisted
    
    RemoteEventStatus:
              type: object
              properties:
                type:   
                  $ref: '#/components/schemas/RemoteEventType'
                status:
                  oneOf:
                    - $ref: '#/components/schemas/RemoteDoneEventStatus'
                    - $ref: '#/components/schemas/RemotePendingEventStatus'
                failureCause:   
                  $ref: '#/components/schemas/RemoteFailedEventStatus'
                feedbackDetail:
                  $ref: '#/components/schemas/RemoteEventFeedbackDetail'
              required: [type,status]
              
    
      
    RemoteEvent:
      title: RemoteEvent
      type: object
      properties:
        remoteActionId:
          $ref: '#/components/schemas/RemoteActionId'
      
        vin:
          description: Identifier of the vehicle that raises the event.
          type: string  
        eventDate:
          description: The date when the event was raised.
          type: string
          format: date-time
        remoteType:
          $ref: '#/components/schemas/RemoteType'
        eventStatus:
            $ref: '#/components/schemas/RemoteEventStatus'

    xError:
      type: object
      description: Detailed error
      properties:
        code:
          description: The application error code (do not confuse with http response code which is handled in http headed)
          type: integer
        debug:
          description: To investigate potential mismatches (such as the soft version or component name..). 
          type: string
        message:
          description: A human-readable error message.
          type: string
      example:
        code: 500123
        debug: CMP_001234
        message: Not able to process the post.
        
   

  ########################### RESPONSES
  
  
  responses:
    PostErrorResponse:
      description: Post event error
      content:
       application/json:
        schema:
          $ref: '#/components/schemas/xError'     
          
          
          
          ################### PARMS
          
          
          
  parameters:
    headerAttribute:
      name: <header-attribute-key> 
      description: |
         An attribute key/value as specified in the registered callback in additional attributes set as an HTTP header entry(_can also be used as an **Authorization** (Bearer authentication)).
         
         **Note**:  ```This parameter is repeated as many times as attributes typed as 'header' in the declared attribute-set when registring of the callback.```
      in: header
      required: true
      schema:
        type: string
    queryAttribute:
      name: <query-attribute-key> 
      description: |
         An attribute key/value as specified in the registered callback in additional attributes set as HTTP query parameter.
         
         **Note**:  ```This parameter is repeated as many times as attributes typed as 'query' in the declared attribute-set when registring of the callback.```
      in: header
      required: true
      schema:
        type: string
        
    tokenAuth:
      name: authorization
      description: >-
        HTTP token authentication (Bearer authentication) as part of .
      in: header
      required: true
      schema:
        type: string
        pattern: Bearer (\w|-|=)*
